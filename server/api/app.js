import v from"dotenv";import y from"express";import C from"morgan";import u,{Schema as O}from"mongoose";import R from"cors";import D from"bcryptjs";import k from"jsonwebtoken";import i from"joi";import B from"mongoose-delete";import x from"mongoose-paginate-v2";import K from"multer";import{v2 as l}from"cloudinary";import{CloudinaryStorage as U}from"multer-storage-cloudinary";const M=async s=>{try{const t=await u.connect(s);console.log(`MongoDB Connected: ${t.connection.host}`)}catch(t){console.error(`Error: ${t.message}`),process.exit(1)}},N=new u.Schema({name:{type:O.Types.String,minLength:6,maxLength:255},email:{type:String,required:!0,unique:!0},password:{type:String},role:{type:String,enum:["admin","member"],default:"member"}},{timestamps:!0,versionKey:!1}),w=u.model("User",N),W=i.object({name:i.string(),email:i.string().email().required().messages({"string.base":'"email" phải là kiểu "text"',"string.empty":'"email" không được bỏ trống',"string.email":'"email" phải có định dạng là email',"any.required":'"email" là trường bắt buộc'}),password:i.string().min(6).required().messages({"string.base":'"password" phải là kiểu "text"',"string.empty":'"password" không được bỏ trống',"string.min":'"password" phải chứa ít nhất {#limit} ký tự',"any.required":'"password" là trường bắt buộc'}),confirmPassword:i.string().valid(i.ref("password")).required().messages({"string.base":'"confirmPassword" phải là kiểu "text"',"string.empty":'"confirmPassword" không được bỏ trống',"any.only":'"confirmPassword" phải giống "password"',"any.required":'"confirmPassword" là trường bắt buộc'})}),z=i.object({email:i.string().email().required().messages({"string.base":'"email" phải là kiểu "text"',"string.empty":'"email" không được bỏ trống',"string.email":'"email" phải có định dạng là email',"any.required":'"email" là trường bắt buộc'}),password:i.string().required().messages({"string.base":'"password" phải là kiểu "text"',"string.empty":'"password" không được bỏ trống',"string.min":'"password" phải chứa ít nhất {#limit} ký tự',"any.required":'"password" là trường bắt buộc'})});v.config();const J=async(s,t)=>{try{const{name:e,email:r,password:n,confirmPassword:a}=s.body,{error:o}=await W.validate({name:e,email:r,password:n,confirmPassword:a},{abortEarly:!1});if(o){const I=o.details.map($=>$.message);return t.status(400).json({message:I})}if(await w.findOne({email:r}))return t.status(400).json({message:"Email đã tồn tại"});const f=await D.hash(n,10),c=await w.create({name:e,email:r,password:f}),h=k.sign({_id:c._id},process.env.JWT_SECRET);return t.status(201).json({message:"Đăng ký thành công",token:h,user:{_id:c._id,name:c.name,email:c.email}})}catch(e){return t.status(400).json({message:e.message})}},X=async(s,t)=>{try{const{email:e,password:r}=s.body,{error:n}=z.validate({email:e,password:r},{abortEarly:!1});if(n){const h=n.details.map(I=>I.message);return t.status(400).json({message:h})}const a=await w.findOne({email:e});if(!a)return t.status(400).json({message:"Tài khoản không tồn tại"});if(!await D.compare(r,a.password))return t.status(400).json({message:"Mật khẩu không khớp"});const d=k.sign({_id:a._id},"123456"),{password:f,...c}=a;t.status(200).json({data:c,accessToken:d})}catch(e){return t.status(400).json({message:e.message})}},P=y.Router();P.post("/signup",J);P.post("/signin",X);const F=[x,B],S=new u.Schema({name:{type:String,required:!0},isDeleteable:{type:Boolean,default:!0},products:[{type:u.Types.ObjectId,ref:"Product"}]},{timestamps:!0,versionKey:!1});S.pre("findOneAndDelete",async function(s){var t;try{const e=u.model("Product"),r=this.getFilter(),a={categoryId:((t=this.getQuery().$set)==null?void 0:t.categoryId)??"uncategorized"};await e.updateMany({categoryId:r._id},a),s()}catch(e){s(e)}});F.forEach(s=>{S.plugin(s)});const b=u.model("Category",S),G=[x,B],q=new u.Schema({name:{type:String,required:!0},price:{type:Number,required:!0,min:0},description:{type:String},categoryId:{type:u.Schema.Types.ObjectId,ref:"Category",required:!0},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now},deletedAt:{type:Date,default:null},deleted:{type:Boolean,default:!1}},{timestamps:!0,versionKey:!1});G.forEach(s=>{q.plugin(s,{deletedAt:!0,overrideMethods:!0})});const g=u.model("Product",q),_=i.object({name:i.string().required(),price:i.number().required().min(0),description:i.string(),categoryId:i.string().required(),createdAt:i.date().default(()=>new Date),updatedAt:i.date().default(()=>new Date),deletedAt:i.date().default(null),deleted:i.boolean().default(!1)}),H=async(s,t)=>{const{_page:e=1,_limit:r=10,_sort:n="createdAt",_order:a="asc",_expand:o}=s.query,d={page:e,limit:r,sort:{[n]:a==="desc"?-1:1}},f=o?[{path:"categoryId",select:"name"}]:[];try{const c=await g.paginate({categoryId:null},{...d,populate:f});if(c.docs.length===0)throw new Error("No products found");const h={data:c.docs,pagination:{currentPage:c.page,totalPages:c.totalPages,totalItems:c.totalDocs}};return t.status(200).json(h)}catch(c){return t.status(400).json({message:c.message})}},L=async(s,t)=>{try{const e=await g.findById(s.params.id);if(!e)throw new Error("Product not found");return t.status(200).json({data:e})}catch(e){return t.status(400).json({message:e.message})}},Z=async(s,t)=>{try{const{error:e}=_.validate(s.body,{abortEarly:!1});if(e){const n=e.details.map(a=>({message:a}));return t.status(400).json({errors:n})}const r=await g.create(s.body);return await b.findOneAndUpdate(r.categoryId,{$addToSet:{products:r._id}}),t.status(200).json({product:r})}catch(e){return t.status(400).json({message:"Thêm sản phẩm không thành công",error:e.message})}},Q=async(s,t)=>{try{const{error:e}=_.validate(s.body,{abortEarly:!1});if(e)return t.status(400).json({messages:e.details.map(d=>({message:d}))});const r=s.params.id,n=await g.findOneAndUpdate({_id:r},s.body,{new:!0});if(!n)return t.sendStatus(404);const a=n.categoryId;await b.findByIdAndUpdate(a,{$pull:{products:r}});const o=s.body.categoryId;return o&&await b.findByIdAndUpdate(o,{$addToSet:{products:r}}),t.status(200).json(n)}catch(e){return t.status(500).json({message:"Cập nhật sản phẩm không thành công",error:e.message})}},V=async(s,t)=>{try{const e=s.params.id,{isHardDelete:r}=s.body,{error:n}=_.validate(s.body,{abortEarly:!1});if(n){const o=n.details.map(d=>({message:d}));return t.status(400).json({errors:o})}const a=await g.findById(e);return a?(r?(await a.forceDelete(),await b.findByIdAndUpdate(a.categoryId,{$pull:{products:a._id}})):await a.delete(),t.status(200).json({message:"Xóa sản phẩm thành công",data:a})):t.status(404).json({message:"Không tìm thấy sản phẩm"})}catch(e){t.status(400).json({message:"Xóa sản phẩm thất bại",error:e.message})}},Y=async(s,t)=>{try{const e=s.params.id,r=s.user,n=await g.findById(e);if(!r.role||r.role!=="admin")return t.status(403).json({message:"Bạn không có quyền phục hồi sản phẩm"});if(!n)return t.status(404).json({message:"Không tìm thấy sản phẩm"});if(!n.deleted)return t.status(400).json({message:"Sản phẩm chưa bị xóa mềm"});n.deleted=!1,n.deletedAt=null;const a=await n.save();return t.status(200).json({message:"Phục hồi sản phẩm thành công",data:a})}catch(e){t.status(400).json({message:"Phục hồi sản phẩm không thành công",error:e.message})}},E=async(s,t,e)=>{try{if(s.user.role!=="admin")throw new Error("Bạn không có quyền để thực hiện hành động này");e()}catch(r){t.status(403).json({message:r.message})}},A=async(s,t,e)=>{try{const r=s.headers.authorization;if(!r)throw new Error("Bạn phải đăng nhập để thực hiện hành động này");const n=r&&r.split(" ")[1],a=process.env.JWT_SECRET,{id:o}=k.verify(n,a),d=await w.findById(o);if(!d)throw new Error("Không tìm thấy người dùng");s.user=d,e()}catch(r){t.status(401).json({message:r.message})}},m=y.Router();m.get("/products",H);m.get("/products/:id",L);m.post("/products/:id",Z);m.patch("/products/:id",A,E,Y);m.put("/products/:id",A,E,Q);m.delete("/products/:id",A,E,V);l.config({cloud_name:"ecommercer2021",api_key:"626155946999554",api_secret:"7VZ2gYWaR0ZWKGfd55uBPIjEnso"});const tt=async(s,t)=>{const e=s.files;if(!Array.isArray(e))return t.status(400).json({error:"No files were uploaded"});try{const r=e.map(o=>l.uploader.upload(o.path));console.log("uploadPromises",r);const a=(await Promise.all(r)).map(o=>({url:o.secure_url,publicId:o.public_id}));return t.json({urls:a})}catch(r){return t.status(500).json({error:r.message})}},et=async(s,t)=>{const e=s.params.publicId;try{const r=await l.uploader.destroy(e);return t.status(200).json({message:"Xóa ảnh thành công",result:r})}catch(r){t.status(500).json({error:r.message||"Error deleting image"})}},st=async(s,t)=>{const e=s.files;if(!Array.isArray(e))return t.status(400).json({error:"No files were uploaded"});const r=s.params.publicId,n=s.files[0].path;try{const[a,o]=await Promise.all([l.uploader.upload(n),l.uploader.destroy(r)]);return t.json({url:a.secure_url,publicId:a.public_id})}catch(a){return console.log(a),t.status(500).json({error:a.message||"Error updating image"})}},j=y.Router(),rt=new U({cloudinary:l,params:{folder:"WE17301",format:"png"}}),T=K({storage:rt});j.post("/images/upload",T.array("images",10),tt);j.delete("/images/:publicId",et);j.put("/images/:publicId",T.array("images",10),st);const p=y();v.config();M(process.env.MONGO_URI);p.use(y.json());p.use(C("tiny"));p.use(R());p.use("/api",m);p.use("/api",P);p.use("/api",j);const ft=p;export{ft as viteNodeApp};
